// 지난 2022년, 병호는 목표를 위해 아주 열심히 달려왔다. 너무 열심히 한 탓일까?.. 2023년 병호는 자신이 얼마나 합법적으로 쉴 수 있는지 계산해보려고 한다. 2023년에는 다행히 윤년이 아니다! 즉, 2월은 28일 까지뿐이라 하루를 덜 일할 수 있다.

// 몇몇 공휴일이 주말과 겹쳐서 슬픈 직장인들을 위해, 평일을 공휴일로 지정하여 쉴 수 있도록 임시 공휴일이 지정된다. 임시 공휴일은 다음과 같은 규칙으로 지정된다.

// 공휴일로 지정된 날이 토요일인 경우, 이전 금요일이 임시 공휴일로 지정된다. 만약 금요일도 공휴일로 지정되어 있다면, 해당 금요일 이전의 가장 가까운 평일이 임시 공휴일로 지정된다.
// 공휴일로 지정된 날이 일요일인 경우, 해당 날 이후 가장 가까운 월요일이 임시 공휴일로 지정된다. 만약 월요일도 공휴일로 지정되어 있다면, 해당 월요일 이후 가장 가까운 평일이 임시 공휴일로 지정된다.
// 규칙을 통해 임시 공휴일을 지정할 때, 전년도나 다음 연도로 넘어가는 경우 임시 공휴일을 지정하지 않는다.
// 병호는 금융 치료를 통해 몸과 마음을 안정시킨다. 월급날은 매월 Y 일이다! 월급날이 공휴일인 경우 다음 규칙을 통해 월급날이 변경된다.

// 월급날이 평일인 경우 병호는 그날 월급을 받는다.
// 월급날이 공휴일 또는 주말인 경우 병호는 가장 가까운 평일에 월급을 받는다.
// 2번 조건에 해당하는 일이 여러 개인 경우, 더 이른 날짜에 월급을 받는다.
// 월급은 전 달이나 다음 달로 넘어가서 받지 않으며, 해당 월에 조정 가능한 날이 없다면 Y 일에 받는다.
// 2023년 1월 1일이 무슨 요일인지 주어지고 공휴일 월 일에 대한 정보가 주어진다. 또한, 병호의 매월 월급날 Y일이 주어질 때, 병호가 월급은 언제 받을 수 있는지 월별로 일을 출력한다.

// 입력
// X: 1월 1일이 무슨 요일인지 의미한다. 1은 월요일, 2는 화요일, 3은 수요일, … 7은 일요일을 의미한다. ( 1<=X<=7)
// H(M,D): 공휴일 정보로 M월 D일이 공휴일 임을 의미한다.
// Y: 매월 월급 날을 의미한다. 2월은 28일까지 있으므로 Y는 28보다 작은 자연수이다.
// 출력
// 병호의 금융 치료를 위해 월급 날을 1월부터 12월 까지 순서대로 일자를 반환한다.
// 예시 입출력
// X	H	Y	return
// 7	[[1,1],[1,21],[1,22],[1,23],[3,1],[5,5],[5,27],[6,6],[8,15],[9,28],[9,29],[9,30],[10,3],[10,9],[12,25]]	5	[5,6,6,5,4,5,5,4,5,5,6,5]


function solution(X, H, Y) {
  let answer = 0;
  let month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
  let now = X;
  let salary = [];
  for (let i = 0; i < month.length; i++) {
      for (let j = 1; j <= month[i]; j++) {
          if (now === 6 || now === 7) {
              answer += 1;
          }
          if (j === Y && now !== 6 && now !== 7) {
              salary.push(Y)
          } else if (j === Y && now === 6) {
              salary.push(Y - 1)
          } else if (j === Y && now === 7) {
              salary.push(Y + 1)
          }
          for (let k = 0; k < H.length; k++) {
              if (H[k][0] === i + 1 && H[k][1] === j && now !== 6 && now !== 7) {
                  answer += 1
              } else if (H[k][0] === i + 1 && H[k][1] === j && (now === 6 || now === 7)) {
                  answer += 1
              } 
              if (H[k][0] === i + 1 && H[k][1] === Y && now !== 6 && now !== 7) {
                  if (Y === 1) {
                      salary[i] = Y + 1;
                      salary.splice(i + 1, 1)
                  } else {
                      salary[i] = Y - 1;
                      salary.splice(i + 1, 1)
                  }
              } else if (H[k][0] === i + 1 && H[k][1] === Y && now === 6) {
                  if (Y === 1) {
                      salary[i] = Y + 1;
                      salary.splice(i + 1, 1)
                  } else {
                      salary[i] = Y - 1;
                      salary.splice(i + 1, 1)
                  }
              }
          }
          
          if (now === 7) {
              now = 1;
          } else {
              now++;
          }
      }
      console.log(salary)
  }
  return salary;
}